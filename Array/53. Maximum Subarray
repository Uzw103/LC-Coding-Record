\#

\# @lc app=leetcode id=53 lang=python3

\#

*\# [53] **Maximum Subarray***

***\#Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.***

***Example：***

```
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
```

\# @lc code=start

### ==Solution：==

1. **动态规划**：定义一个状态，以nums[i]为尾的连续子数组的最大和创建状态转移方程：一个res保存最终最大sum结果 一个pre保存不断后移元素的sum值 如果大于0就append到pre上，如果小于0就另起炉灶 让pre和res都重置
2. **创建pre和res的初始值**: 当前状态只与上一个状态有关 不需要遍历整个list，用res存好sum 判断当前pre和前一个pre的值比较即可（类似<u>创建滚动数组</u>）

```python
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        length = len(nums)
        pre = nums[0]
        res = pre
        for i in range(1, length):
            if pre < 0:
                pre = nums[i]
            else:
                pre = pre + nums[i]
            res = max(res, pre)
        return res
```



