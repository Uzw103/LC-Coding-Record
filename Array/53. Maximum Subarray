#
# @lc app=leetcode id=53 lang=python3
#
# [53] Maximum Subarray
#


思路：1. 动态规划
      2. 定义一个状态：以nums[i]为尾的连续子数组的最大和
      3. 创建状态转移方程：一个res保存最终最大sum结果 一个pre保存不断后移元素的sum值 如果大于0就append到pre上，如果小于0就另起炉灶 让pre和res都重置
      4. 创建pre和res的初始值
      5. 当前状态只与上一个状态有关 不需要遍历整个list，用res存好sum 判断当前pre和前一个pre的值比较即可


# @lc code=start
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        
