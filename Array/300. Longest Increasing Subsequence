#
# @lc app=leetcode id=300 lang=python3
#
# [300] Longest Increasing Subsequence
#
'''
1. DP思想解决‘最优化问题’
2. 首先figure out 子问题 dp[i] ：表示最后一个元素以nums[i]结尾的最长上升子序列的‘长度’
3. 想出状态转移方程，即怎么写逻辑 使得已知了dp[i-1]能推出dp[i] 。到当前元素 判断是否为大的 遍历dp中的值 取最大的值+1变成当前的dp值 



# @lc code=start
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        if len(nums) < 1:
            return 0
        dp = [1] * len(nums)
        for i in range(len(nums)):
            for j in range(i):
                if nums[i] > nums[j]:
                    dp[i] = max(dp[i], dp[j]+1)
        return max(dp)
