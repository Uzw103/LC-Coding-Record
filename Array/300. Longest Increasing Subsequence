#

\#

\# @lc app=leetcode id=300 lang=python3

\#

*\# [300] **Longest Increasing Subsequence***

***\#Given an integer array `nums`, return the length of the longest strictly increasing subsequence.***

***A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.***

***Example：***

```
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
```

### ==Solution：==

1. DP思想解决‘**最优化问题**’
2. 首先figure out 子问题 dp[i] ：**表示最后一个元素以nums[i]结尾的最长上升子序列的‘长度’**
3. 想出状态转移方程，即怎么写逻辑 使得已知了dp[i-1]能推出dp[i] 。到当前元素 判断是否为大的 遍历dp中的值 取最大的值+1变成当前的dp值 

@lc code=start'''

```python
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        # dp[i]代表当前数组元素前面有多少个比当前元素小的元素
        if len(nums) < 1:
            return 0
        dp = [1]  len(nums)
        for i in range(len(nums)):
            for j in range(i):
                if nums[j] < nums[i]:
                    dp[i] = max(dp[i], dp[j] + 1)
        return max(dp)
```