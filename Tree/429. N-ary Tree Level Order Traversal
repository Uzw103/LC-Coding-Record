#
# @lc app=leetcode id=429 lang=python3
#
# [429] N-ary Tree Level Order Traversal
#
’‘’
    1. append只能单个添加元素append，extend可以添加一个数组也可以是一个和原queue相同type的可迭代元素
    2. BFS用queue做，DFS用stack做
    3. 注意结果result列表的存储方式，是每一层一个列表存储，因此每一层要用一个新的列表先存储其值，再一起append到res中
    4. 每次从队列头取结点 将其children结点extend到queue后面 
 ‘’‘

# @lc code=start
"""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

class Solution:
    def levelOrder(self, root: 'Node') -> List[List[int]]:
        if not root:
            return []
        res = []
        from collections import deque
        queue = deque([root])
        while queue:
            level_val = []
            for i in range(len(queue)):
                node = queue.popleft()
                level_val.append(node.val)
                queue.extend(node.children)
            res.append(level_val)
        return res
